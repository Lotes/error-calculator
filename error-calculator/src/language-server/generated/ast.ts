/******************************************************************************
 * This file was generated by langium-cli 0.3.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, isAstNode } from 'langium';

export interface Factor extends AstNode {
    readonly $container: Return;
    error: string
    value: string
}

export const Factor = 'Factor';

export function isFactor(item: unknown): item is Factor {
    return reflection.isInstance(item, Factor);
}

export interface Return extends AstNode {
    factor: Factor
}

export const Return = 'Return';

export function isReturn(item: unknown): item is Return {
    return reflection.isInstance(item, Return);
}

export type EpsilonRhoRhoAstType = 'Factor' | 'Return';

export type EpsilonRhoRhoAstReference = never;

export class EpsilonRhoRhoAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Factor', 'Return'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: EpsilonRhoRhoAstReference): string {
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}

export const reflection = new EpsilonRhoRhoAstReflection();
