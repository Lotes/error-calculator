/******************************************************************************
 * This file was generated by langium-cli 0.3.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, isAstNode } from 'langium';

export type S = Return;

export const S = 'S';

export function isS(item: unknown): item is S {
    return reflection.isInstance(item, S);
}

export interface Expression extends AstNode {
    readonly $container: Expression | Factor | Return;
    left: Expression | Term
    operator: '+' | '-'
    right: Term
}

export const Expression = 'Expression';

export function isExpression(item: unknown): item is Expression {
    return reflection.isInstance(item, Expression);
}

export interface Factor extends AstNode {
    readonly $container: Factor | Term;
    expression: Expression
    negated: Factor
    num: Number
    varUsage: Reference<Variable>
}

export const Factor = 'Factor';

export function isFactor(item: unknown): item is Factor {
    return reflection.isInstance(item, Factor);
}

export interface Number extends AstNode {
    readonly $container: Factor;
    error: string
    value: string
}

export const Number = 'Number';

export function isNumber(item: unknown): item is Number {
    return reflection.isInstance(item, Number);
}

export interface Return extends AstNode {
    left: Expression
    variables: Array<Variable>
}

export const Return = 'Return';

export function isReturn(item: unknown): item is Return {
    return reflection.isInstance(item, Return);
}

export interface Term extends AstNode {
    readonly $container: Expression | Term;
    left: Factor | Term
    operator: '*' | '/'
    right: Factor
}

export const Term = 'Term';

export function isTerm(item: unknown): item is Term {
    return reflection.isInstance(item, Term);
}

export interface Variable extends AstNode {
    readonly $container: Return;
    name: string
}

export const Variable = 'Variable';

export function isVariable(item: unknown): item is Variable {
    return reflection.isInstance(item, Variable);
}

export type EpsilonRhoRhoAstType = 'Expression' | 'Factor' | 'Number' | 'Return' | 'S' | 'Term' | 'Variable';

export type EpsilonRhoRhoAstReference = 'Factor:varUsage';

export class EpsilonRhoRhoAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Expression', 'Factor', 'Number', 'Return', 'S', 'Term', 'Variable'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case Return: {
                return this.isSubtype(S, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: EpsilonRhoRhoAstReference): string {
        switch (referenceId) {
            case 'Factor:varUsage': {
                return Variable;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}

export const reflection = new EpsilonRhoRhoAstReflection();
